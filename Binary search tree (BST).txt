Iterator Method
_____________________
#include <bits/stdc++.h>
using namespace std;

class BST{
  private:
  
  struct Node{
      int data;
      Node*Rigth;
      Node* Left;
  };
  Node * root =nullptr;
  
  public:
  
  void add(int value){
    Node*newNode = new Node;
    newNode->data=value;
    newNode->Rigth=nullptr;
     newNode->Left=nullptr;
  }
  
  if(root == nullptr){
      root =newNode;
      return;
  }
  
  Node*temp=root;
  Node*parent=nullptr;
  
  while(temp!=nullptr){
      parent=temp;
      if(value<=temp->data){
          temp=temp->Left;
      }
      else{
          temp=temp->Rigth;
      }
  }
  
  if(value<=parent->data)
      parent->Left=newNode;
  
  else
      parent->Rigth=newNode;
  
};

int main()
{
    int x=10;
    cout<<"Hello World"<<" "<<x<<endl;

    return 0;
}

____________________________________________________________

Recursion Method
__________________________
#include <bits/stdc++.h>
using namespace std;

class BST{
  private:
  
  struct Node{
      int data;
      Node*Rigth;
      Node* Left;
      
      Node(int value){
          data=value;
          Left=Rigth=nullptr;
      }
  };
  Node * root =nullptr;
  
  public:
  void addHelper(Node*temp,int value){
      if(value<=temp->data){
          if(temp->Left == nullptr){
                    
                       temp->Left=newNode(value);
          }
          else{
            addHelper(temp->Left,value);
      }
      else{
                if(temp->Rigth == nullptr){
                   
                       temp->Rigth=newNode(value);
          }
          else{
            addHelper(temp->Rigth,value);
      }
      }
      
  }
  
  void add(int value)
{
  if(root == nullptr)
  {
     
     root=newNode(value);
  }
  else
  {
      addHelper(root,value);
  }
}
  


int main()
{
    int x=10;
    cout<<"Hello World"<<" "<<x<<endl;

    return 0;
}

